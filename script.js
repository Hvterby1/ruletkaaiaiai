// –û–±—â–∏–π –±–∞–ª–∞–Ω—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage)
let balance = parseFloat(localStorage.getItem('balance'));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∞–ª–∞–Ω—Å —á–∏—Å–ª–æ–º. –ï—Å–ª–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –≤ 0.
if (isNaN(balance)) {
  balance = 0;
  localStorage.setItem('balance', balance); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function updateBalance() {
  document.getElementById('global-balance').textContent = `–ë–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`;
  localStorage.setItem('balance', balance); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ localStorage
}

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
function setupDepositModal() {
  const depositModal = document.getElementById('depositModal');
  const depositButton = document.getElementById('deposit') || document.getElementById('deposit-main');
  const confirmDepositButton = document.getElementById('confirmDeposit');
  const closeModalButton = document.getElementById('closeModal');

  if (depositButton) {
    depositButton.addEventListener('click', () => {
      depositModal.style.display = 'block';
    });
  }

  if (confirmDepositButton) {
    confirmDepositButton.addEventListener('click', () => {
      const amount = parseFloat(document.getElementById('depositAmount').value);
      if (amount > 0) {
        balance += amount;
        updateBalance();
        depositModal.style.display = 'none';
      } else {
        alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!');
      }
    });
  }

  if (closeModalButton) {
    closeModalButton.addEventListener('click', () => {
      depositModal.style.display = 'none';
    });
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
if (document.getElementById('rocket-mode')) {
  document.getElementById('rocket-mode').addEventListener('click', () => {
    window.location.href = 'rocket.html'; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–†–∞–∫–µ—Ç–∫–∞"
  });

  document.getElementById('slots-mode').addEventListener('click', () => {
    window.location.href = 'slots.html'; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–°–ª–æ—Ç—ã"
  });

  document.getElementById('other-mode').addEventListener('click', () => {
    alert('–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
  });
}

// –†–µ–∂–∏–º "–†–∞–∫–µ—Ç–∫–∞"
if (document.getElementById('start')) {
  let multiplier = 1.0;
  let isFlying = false;
  let interval;

  document.getElementById('start').addEventListener('click', () => {
    const betInput = document.getElementById('bet').value;
    const bet = parseFloat(betInput);

    if (isNaN(bet) || betInput.trim() === '') {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!');
      return;
    }

    if (bet < 10) return alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10 –º–æ–Ω–µ—Ç!');
    if (bet > balance) return alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!');

    balance -= bet;
    updateBalance();

    isFlying = true;
    multiplier = 1.0;
    document.getElementById('multiplier').textContent = `${multiplier.toFixed(2)}x`;

    interval = setInterval(() => {
      if (!isFlying) return;
      multiplier += 0.1;
      document.getElementById('multiplier').textContent = `${multiplier.toFixed(2)}x`;

      if (Math.random() < 0.01) {
        endGame(false);
      }
    }, 100);
  });

  document.getElementById('cashout').addEventListener('click', () => {
    if (!isFlying) return;
    endGame(true);
  });

  function endGame(isWin) {
    clearInterval(interval);
    isFlying = false;

    const bet = parseFloat(document.getElementById('bet').value);
    if (isWin) {
      const winAmount = bet * multiplier;
      balance += winAmount;
      alert(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount.toFixed(2)} –º–æ–Ω–µ—Ç!`);
    } else {
      alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å—Ç–∞–≤–∫—É!');
    }
    updateBalance();
  }
}

// –†–µ–∂–∏–º "–°–ª–æ—Ç—ã"
if (document.getElementById('spin')) {
  const symbols = ["üçí", "üçã", "üçâ", "BAR", "7", "‚≠ê"];
  const paytable = {
    "üçíüçíüçí": 10,
    "üçãüçãüçã": 15,
    "üçâüçâüçâ": 30,
    "BAR BAR BAR": 200,
    "777": 1000,
    "‚≠ê‚≠ê‚≠ê": 500,
  };

  document.getElementById('spin').addEventListener('click', () => {
    const reels = document.querySelectorAll('.reel');
    const resultElement = document.getElementById('result');
    const bet = parseFloat(document.getElementById('bet').value);

    if (isNaN(bet) || bet < 10) {
      resultElement.textContent = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10 –º–æ–Ω–µ—Ç!";
      return;
    }

    if (bet > balance) {
      resultElement.textContent = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!";
      return;
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    balance -= bet;
    updateBalance();

    // –í—Ä–∞—â–µ–Ω–∏–µ –±–∞—Ä–∞–±–∞–Ω–æ–≤
    reels.forEach((reel) => {
      reel.textContent = symbols[Math.floor(Math.random() * symbols.length)];
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    setTimeout(() => {
      const combination = Array.from(reels)
        .map((reel) => reel.textContent)
        .join("");
      const winMultiplier = paytable[combination] || 0;

      if (winMultiplier > 0) {
        const winAmount = bet * winMultiplier;
        balance += winAmount;
        resultElement.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} –º–æ–Ω–µ—Ç! (${winMultiplier}x)`;
      } else {
        resultElement.textContent = "–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!";
      }

      updateBalance();
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  });
}

// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
if (document.getElementById('back-to-menu')) {
  document.getElementById('back-to-menu').addEventListener('click', () => {
    window.location.href = 'index.html'; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateBalance();
setupDepositModal();